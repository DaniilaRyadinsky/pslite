#pragma checksum "C:\Users\dikij\Документы\study fuck\сцои\pslite\Binarization.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "C2BFDDF8B2C695556E9C32339EE032A541CC6ACB2498B41D3B1F2DF53583309A"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ImageLinker2
{
    partial class Binarization : 
        global::Microsoft.UI.Xaml.Controls.UserControl, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2503")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Microsoft_UI_Xaml_UIElement_Visibility(global::Microsoft.UI.Xaml.UIElement obj, global::Microsoft.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Control_IsEnabled(global::Microsoft.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2503")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private partial class Binarization_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IBinarization_Bindings
        {
            private global::ImageLinker2.Binarization dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Microsoft.UI.Xaml.Controls.StackPanel obj2;
            private global::Microsoft.UI.Xaml.Controls.RadioButtons obj3;
            private global::Microsoft.UI.Xaml.Controls.TextBox obj4;
            private global::Microsoft.UI.Xaml.Controls.TextBox obj5;
            private global::Microsoft.UI.Xaml.Controls.TextBox obj6;
            private global::Microsoft.UI.Xaml.Controls.Button obj7;

            // Fields for each event bindings event handler.
            private global::Microsoft.UI.Xaml.Controls.SelectionChangedEventHandler obj3SelectionChanged;
            private global::Microsoft.UI.Xaml.Controls.TextChangedEventHandler obj4TextChanged;
            private global::Microsoft.UI.Xaml.Controls.TextChangedEventHandler obj5TextChanged;
            private global::Microsoft.UI.Xaml.Controls.TextChangedEventHandler obj6TextChanged;
            private global::Microsoft.UI.Xaml.RoutedEventHandler obj7Click;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj2VisibilityDisabled = false;
            private static bool isobj4IsEnabledDisabled = false;
            private static bool isobj5IsEnabledDisabled = false;
            private static bool isobj6IsEnabledDisabled = false;

            private Binarization_obj1_BindingsTracking bindingsTracking;

            public Binarization_obj1_Bindings()
            {
                this.bindingsTracking = new Binarization_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 11 && columnNumber == 17)
                {
                    isobj2VisibilityDisabled = true;
                }
                else if (lineNumber == 12 && columnNumber == 41)
                {
                    this.obj3.SelectionChanged -= obj3SelectionChanged;
                }
                else if (lineNumber == 22 && columnNumber == 27)
                {
                    isobj4IsEnabledDisabled = true;
                }
                else if (lineNumber == 22 && columnNumber == 102)
                {
                    this.obj4.TextChanged -= obj4TextChanged;
                }
                else if (lineNumber == 23 && columnNumber == 29)
                {
                    isobj5IsEnabledDisabled = true;
                }
                else if (lineNumber == 23 && columnNumber == 94)
                {
                    this.obj5.TextChanged -= obj5TextChanged;
                }
                else if (lineNumber == 24 && columnNumber == 29)
                {
                    isobj6IsEnabledDisabled = true;
                }
                else if (lineNumber == 24 && columnNumber == 113)
                {
                    this.obj6.TextChanged -= obj6TextChanged;
                }
                else if (lineNumber == 26 && columnNumber == 47)
                {
                    this.obj7.Click -= obj7Click;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // Binarization.xaml line 11
                        this.obj2 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.StackPanel>(target);
                        break;
                    case 3: // Binarization.xaml line 12
                        this.obj3 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.RadioButtons>(target);
                        this.obj3SelectionChanged = (global::System.Object p0, global::Microsoft.UI.Xaml.Controls.SelectionChangedEventArgs p1) =>
                        {
                            if (this.dataRoot != null)
                            {
                                if (this.dataRoot.ViewModel != null)
                                {
                                    this.dataRoot.ViewModel.Mode_SelectionChanged(p0, p1);
                                }
                            }
                        };
                        (global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.RadioButtons>(target)).SelectionChanged += obj3SelectionChanged;
                        break;
                    case 4: // Binarization.xaml line 22
                        this.obj4 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                        this.obj4TextChanged = (global::System.Object p0, global::Microsoft.UI.Xaml.Controls.TextChangedEventArgs p1) =>
                        {
                            if (this.dataRoot != null)
                            {
                                if (this.dataRoot.ViewModel != null)
                                {
                                    this.dataRoot.ViewModel.WindowSize_Changed(p0, p1);
                                }
                            }
                        };
                        (global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target)).TextChanged += obj4TextChanged;
                        break;
                    case 5: // Binarization.xaml line 23
                        this.obj5 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                        this.obj5TextChanged = (global::System.Object p0, global::Microsoft.UI.Xaml.Controls.TextChangedEventArgs p1) =>
                        {
                            if (this.dataRoot != null)
                            {
                                if (this.dataRoot.ViewModel != null)
                                {
                                    this.dataRoot.ViewModel.A_Changed(p0, p1);
                                }
                            }
                        };
                        (global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target)).TextChanged += obj5TextChanged;
                        break;
                    case 6: // Binarization.xaml line 24
                        this.obj6 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                        this.obj6TextChanged = (global::System.Object p0, global::Microsoft.UI.Xaml.Controls.TextChangedEventArgs p1) =>
                        {
                            if (this.dataRoot != null)
                            {
                                if (this.dataRoot.ViewModel != null)
                                {
                                    this.dataRoot.ViewModel.K_Changed(p0, p1);
                                }
                            }
                        };
                        (global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target)).TextChanged += obj6TextChanged;
                        break;
                    case 7: // Binarization.xaml line 26
                        this.obj7 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        this.obj7Click = (global::System.Object p0, global::Microsoft.UI.Xaml.RoutedEventArgs p1) =>
                        {
                            if (this.dataRoot != null)
                            {
                                if (this.dataRoot.ViewModel != null)
                                {
                                    this.dataRoot.ViewModel.Render_Click(p0, p1);
                                }
                            }
                        };
                        (global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target)).Click += obj7Click;
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2503")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IBinarization_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::ImageLinker2.Binarization>(newDataRoot);
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::ImageLinker2.Binarization obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_ViewModel(global::ImageLinker2.ViewModel.BinarizationViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Visibility(obj.Visibility, phase);
                        this.Update_ViewModel_IsEnabled(obj.IsEnabled, phase);
                    }
                }
            }
            private void Update_ViewModel_Visibility(global::Microsoft.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Binarization.xaml line 11
                    if (!isobj2VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj2, obj);
                    }
                }
            }
            private void Update_ViewModel_IsEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Binarization.xaml line 22
                    if (!isobj4IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Control_IsEnabled(this.obj4, obj);
                    }
                    // Binarization.xaml line 23
                    if (!isobj5IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Control_IsEnabled(this.obj5, obj);
                    }
                    // Binarization.xaml line 24
                    if (!isobj6IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Control_IsEnabled(this.obj6, obj);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2503")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class Binarization_obj1_BindingsTracking
            {
                private global::System.WeakReference<Binarization_obj1_Bindings> weakRefToBindingObj; 

                public Binarization_obj1_BindingsTracking(Binarization_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<Binarization_obj1_Bindings>(obj);
                }

                public Binarization_obj1_Bindings TryGetBindingObject()
                {
                    Binarization_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                    UpdateChildListeners_ViewModel(null);
                }

                public void DependencyPropertyChanged_ViewModel(global::Microsoft.UI.Xaml.DependencyObject sender, global::Microsoft.UI.Xaml.DependencyProperty prop)
                {
                    Binarization_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::ImageLinker2.Binarization obj = sender as global::ImageLinker2.Binarization;
                        if (obj != null)
                        {
                            bindings.Update_ViewModel(obj.ViewModel, DATA_CHANGED);
                        }
                    }
                }
                private long tokenDPC_ViewModel = 0;
                public void UpdateChildListeners_(global::ImageLinker2.Binarization obj)
                {
                    Binarization_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::ImageLinker2.Binarization.ViewModelProperty, tokenDPC_ViewModel);
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            tokenDPC_ViewModel = obj.RegisterPropertyChangedCallback(global::ImageLinker2.Binarization.ViewModelProperty, DependencyPropertyChanged_ViewModel);
                        }
                    }
                }
                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Binarization_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::ImageLinker2.ViewModel.BinarizationViewModel obj = sender as global::ImageLinker2.ViewModel.BinarizationViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_Visibility(obj.Visibility, DATA_CHANGED);
                                bindings.Update_ViewModel_IsEnabled(obj.IsEnabled, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Visibility":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Visibility(obj.Visibility, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_IsEnabled(obj.IsEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::ImageLinker2.ViewModel.BinarizationViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::ImageLinker2.ViewModel.BinarizationViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2503")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            this._contentLoaded = true;
        }


        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2503")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Binarization.xaml line 2
                {                    
                    global::Microsoft.UI.Xaml.Controls.UserControl element1 = (global::Microsoft.UI.Xaml.Controls.UserControl)target;
                    Binarization_obj1_Bindings bindings = new Binarization_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

